const API_BASE = process.env.REACT_APP_API_URL || '';

const mockPredictions = [
  {
    id: 'match-1',
    date: new Date().toISOString().split('T')[0],
    home: { name: 'Home FC 1', logo: 'https://via.placeholder.com/64?text=H1' },
    away: { name: 'Away FC 1', logo: 'https://via.placeholder.com/64?text=A1' },
    prediction: 'Home Win',
    confidence: 72
  },
  {
    id: 'match-2',
    date: new Date(Date.now() + 86400000).toISOString().split('T')[0],
    home: { name: 'Home FC 2', logo: 'https://via.placeholder.com/64?text=H2' },
    away: { name: 'Away FC 2', logo: 'https://via.placeholder.com/64?text=A2' },
    prediction: 'Draw',
    confidence: 54
  },
  {
    id: 'match-3',
    date: new Date(Date.now() + 2*86400000).toISOString().split('T')[0],
    home: { name: 'Home FC 3', logo: 'https://via.placeholder.com/64?text=H3' },
    away: { name: 'Away FC 3', logo: 'https://via.placeholder.com/64?text=A3' },
    prediction: 'Away Win',
    confidence: 61
  }
];

export async function fetchPredictions() {
  if (!API_BASE) {
    // Return mock data for a full week by rotating mock entries
    const today = new Date();
    const out = [];
    for (let i = 0; i < 7; i++) {
      const idx = i % mockPredictions.length;
      const d = new Date(today);
      d.setDate(today.getDate() + i);
      out.push({ ...mockPredictions[idx], id: `match-${i+1}`, date: d.toISOString().split('T')[0] });
    }
    return out;
  }

  const res = await fetch(`${API_BASE}/api/predictions`);
  if (!res.ok) throw new Error('Failed to fetch predictions from API');
  const data = await res.json();
  return data.predictions;
}
